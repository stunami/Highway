<?php
namespace Versionable\Highway\History;

/**
 * Test class for History.
 * Generated by PHPUnit on 2011-03-19 at 12:10:24.
 */
class HistoryTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var History
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new History;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }

    /**
     * @todo Implement testAdd().
     */
    public function testAddAtNotLastPosition()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->object->go(-1);
      
      $entry4 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry4);
      
      $entries = $this->readAttribute($this->object, 'entries');
      
      $this->assertEquals(array($entry, $entry2, $entry4), $entries);
    }
    
    public function testAdd()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entries = $this->readAttribute($this->object, 'entries');
      
      $this->assertEquals($entries[0], $entry);
    }

    public function testBack()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->assertEquals($this->object->back(), $entry2);
    }

    public function testBackTooFar()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $this->setExpectedException('\OutOfBoundsException');
      $this->object->back();
    }

    public function testGoBackOne()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->assertEquals($entry2, $this->object->go(-1));
    }
    
    public function testGoBackTwo()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->assertEquals($entry, $this->object->go(-2));
    }
    
    public function testBackNoHistory()
    {
      $this->setExpectedException('\OutOfBoundsException');
      $this->object->back();
    }

    /**
     * @todo Implement testForward().
     */
    public function testForwardTooFar()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->setExpectedException('\OutOfBoundsException');
      
      $this->object->forward();
    }
        
    public function testGoForwardOne()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->object->go(-2);
      
      $this->assertEquals($entry2, $this->object->go(1));
    }
    
    public function testGoForwardTwo()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->object->go(-2);
      
      $this->assertEquals($entry2, $this->object->go(1));
    }

    public function testForwardNoHistory()
    {
      $this->setExpectedException('\OutOfBoundsException');
      $this->object->forward();
    }
    
    /**
     * @todo Implement testCount().
     */
    public function testCount()
    {
      $this->assertEquals(count($this->readAttribute($this->object, 'entries')), $this->object->count());
    }
    
    public function testGetLast()
    {
      $entry = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry);
      
      $entry2 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry2);
      
      $entry3 = $this->getMock('Versionable\Highway\History\EntryInterface');
      $this->object->add($entry3);
      
      $this->assertEquals($entry3, $this->object->getLast());
    }
}